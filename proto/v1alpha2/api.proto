// Copyright 2020 The Tekton Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tekton.results.v1alpha2;

import "resources.proto";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/tektoncd/results/proto/v1alpha2/results_go_proto";

service Results {

  rpc CreateResult(CreateResultRequest) returns (Result) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=clusters/*/namespaces/*}/results"
      body: "result"
    };
    option (google.api.method_signature) = "parent,result";
  }

  rpc UpdateResult(UpdateResultRequest) returns (Result) {
    option (google.api.http) = {
      patch: "/v1alpha2/{result.name=clusters/*/namespaces/*/results/*}"
      body: "result"
    };
    option (google.api.method_signature) = "result,update_mask";
  }

  rpc GetResult(GetResultRequest) returns (Result) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=clusters/*/namespaces/*/results/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc DeleteResult(DeleteResultRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=clusters/*/namespaces/*/results/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListResults(ListResultsRequest) returns (ListResultsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=clusters/*/namespaces/*}/results"
    };
    option (google.api.method_signature) = "parent";
  }

  rpc CreateRecord(CreateRecordRequest) returns (Record) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=clusters/*/namespaces/*/results/*}/records"
      body: "record"
    };
    option (google.api.method_signature) = "parent,record";
  }

  rpc UpdateRecord(UpdateRecordRequest) returns (Record) {
    option (google.api.http) = {
      patch: "/v1alpha2/{record.name=clusters/*/namespaces/*/results/*/records/*}"
      body: "record"
    };
    option (google.api.method_signature) = "record,update_mask";
  }

  rpc GetRecord(GetRecordRequest) returns (Record) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=clusters/*/namespaces/*/results/*/records/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListRecords(ListRecordsRequest) returns (ListRecordsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=clusters/*/namespaces/*/results/*}/records"
    };
    option (google.api.method_signature) = "parent";
  }

  rpc DeleteRecord(DeleteRecordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=clusters/*/namespaces/*/results/*/records/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc GetLog(GetLogRequest) returns (stream Log) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=clusters/*/namespaces/*/results/*/logs/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListLogs(ListLogsRequest) returns (ListLogsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=clusters/*/namespaces/*/results/*}/logs"
    };
    option (google.api.method_signature) = "parent";
  }

  rpc UpdateLog(stream Log) returns (LogSummary) {
    option (google.api.method_signature) = "log";
  }

  rpc DeleteLog(DeleteLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=clusters/*/namespaces/*/results/*/logs/*}"
    };
    option (google.api.method_signature) = "name";
  }

}

message CreateResultRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
    }];
  Result result = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteResultRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
    }];
}

message UpdateResultRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}
  Result result = 1 [(google.api.field_behavior) = REQUIRED];

  google.protobuf.FieldMask update_mask = 2;
  string etag = 3;
}

message GetResultRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
    }];
}

message ListResultsRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "tekton.results.v1alpha2/Result"
    }];
  string filter = 2;
  string order_by = 3;
  int32 page_size = 4;
  string page_token = 5;
}

message ListResultsResponse {
  repeated Result results = 1;
  string next_page_token = 2;
}

message CreateRecordRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
      child_type: "tekton.results.v1alpha2/Record"
    }];
  Record record = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteRecordRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}/records/{record}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}

message UpdateRecordRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}/records/{record}
  Record record = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.FieldMask update_mask = 2;
  string etag = 3;
}

message GetRecordRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}/records/{record}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}

message ListRecordsRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
      child_type: "tekton.results.v1alpha2/Record"
    }];
  string filter = 2;
  string order_by = 3;
  int32 page_size = 4;
  string page_token = 5;
}

message ListRecordsResponse {
  repeated Record records = 1;
  string next_page_token = 2;
}

message GetLogRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}/logs/{record}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}

message ListLogsRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Result"
      child_type: "tekton.results.v1alpha2/Record"
    }];
  int32 page_size = 2;
  string page_token = 3;
  string filter = 4;
  string order_by = 5;
}

message ListLogsResponse {
  repeated LogSummary logs = 1;
  string next_page_token = 2;
}

message DeleteLogRequest {
  // Format: clusters/{workspace}/namespaces/{namespace}/results/{result}/logs/{record}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}

